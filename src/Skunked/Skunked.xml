<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Skunked</name>
    </assembly>
    <members>
        <member name="T:Skunked.Cards.Card">
            <summary>
            Standard 52-card deck playing card.
            </summary>
        </member>
        <member name="M:Skunked.Cards.Card.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Skunked.Cards.Card"/> class.
            </summary>
        </member>
        <member name="M:Skunked.Cards.Card.#ctor(Skunked.Cards.Rank,Skunked.Cards.Suit)">
            <summary>
            Initializes a new instance of the <see cref="T:Skunked.Cards.Card"/> class with the specified Rank and Suit.
            </summary>
            <param name="rank">Set Rank.</param>
            <param name="suit">Set Suit.</param>
        </member>
        <member name="M:Skunked.Cards.Card.#ctor(Skunked.Cards.Card)">
            <summary>
            Initializes a new instance of the <see cref="T:Skunked.Cards.Card"/> class.
            </summary>
            <param name="card">The card to make a copy of.</param>
        </member>
        <member name="P:Skunked.Cards.Card.Rank">
            <summary>
            Gets playing card's rank.
            </summary>
        </member>
        <member name="P:Skunked.Cards.Card.Suit">
            <summary>
            Gets playing card's suit.
            </summary>
        </member>
        <member name="T:Skunked.Cards.Dealer">
            <summary>
            Standard dealer.  One card per pass.
            </summary>
        </member>
        <member name="M:Skunked.Cards.Dealer.Deal(Skunked.Cards.Deck,System.Collections.Generic.IList{System.Int32},System.Int32,System.Int32)">
            <summary>
            Deals cards singly to each player starting with the given startingWith player.
            </summary>
            <param name="deck">The set of cards to deal from.</param>
            <param name="players">Set of players being dealt to.</param>
            <param name="startingWith">The player to start the deal with.</param>
            <param name="handSize">Number of cards to deal to each player.</param>
            <returns>Set of player hands in order from dealer.</returns>
        </member>
        <member name="T:Skunked.Cards.Deck">
            <summary>
            Deck of playing cards.
            </summary>
        </member>
        <member name="M:Skunked.Cards.Deck.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Skunked.Cards.Deck"/> class with 52 cards.
            </summary>
        </member>
        <member name="M:Skunked.Cards.Deck.#ctor(System.Collections.Generic.IEnumerable{Skunked.Cards.Card})">
            <summary>
            Initializes a new instance of the <see cref="T:Skunked.Cards.Deck"/> class with 52 cards.
            </summary>
            <param name="deck">Set of cards that make up the deck.</param>
        </member>
        <member name="M:Skunked.Cards.Deck.Shuffle">
            <summary>
            Randomly shuffles the deck.
            </summary>
        </member>
        <member name="M:Skunked.Cards.Deck.Shuffle(System.Int32)">
            <summary>
            Randomly shuffles the deck the given number of times.
            </summary>
            <param name="count">Number of times to shuffle the card.</param>
        </member>
        <member name="M:Skunked.Cards.Deck.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Skunked.Cards.Deck.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="T:Skunked.Cards.Order.RankComparer">
            <summary>
            Compare by value of the Cards rank only.
            </summary>
        </member>
        <member name="P:Skunked.Cards.Order.RankComparer.Instance">
            <summary>
            Gets instance of <see cref="T:Skunked.Cards.Order.RankComparer"/> RankComparer.
            </summary>
        </member>
        <member name="M:Skunked.Cards.Order.RankComparer.Compare(Skunked.Cards.Card,Skunked.Cards.Card)">
            <inheritdoc />
        </member>
        <member name="T:Skunked.Cards.Rank">
            <summary>
            Set of playing card ranks.
            </summary>
        </member>
        <member name="F:Skunked.Cards.Rank.Ace">
            <summary>
            ðŸ‚±
            </summary>
        </member>
        <member name="F:Skunked.Cards.Rank.Two">
            <summary>
            ðŸ‚¢
            </summary>
        </member>
        <member name="F:Skunked.Cards.Rank.Three">
            <summary>
            ðŸ‚£
            </summary>
        </member>
        <member name="F:Skunked.Cards.Rank.Four">
            <summary>
            ðŸ‚¤
            </summary>
        </member>
        <member name="F:Skunked.Cards.Rank.Five">
            <summary>
            ðŸ‚¥
            </summary>
        </member>
        <member name="F:Skunked.Cards.Rank.Six">
            <summary>
            ðŸ‚¦
            </summary>
        </member>
        <member name="F:Skunked.Cards.Rank.Seven">
            <summary>
            ðŸ‚§
            </summary>
        </member>
        <member name="F:Skunked.Cards.Rank.Eight">
            <summary>
            ðŸ‚¨
            </summary>
        </member>
        <member name="F:Skunked.Cards.Rank.Nine">
            <summary>
            ðŸ‚©
            </summary>
        </member>
        <member name="F:Skunked.Cards.Rank.Ten">
            <summary>
            ðŸ‚ª
            </summary>
        </member>
        <member name="F:Skunked.Cards.Rank.Jack">
            <summary>
            ðŸ‚«
            </summary>
        </member>
        <member name="F:Skunked.Cards.Rank.Queen">
            <summary>
            ðŸ‚­
            </summary>
        </member>
        <member name="F:Skunked.Cards.Rank.King">
            <summary>
            ðŸ‚®
            </summary>
        </member>
        <member name="T:Skunked.Cards.Suit">
            <summary>
            Categories into which the cards of a deck are divided.
            </summary>
        </member>
        <member name="F:Skunked.Cards.Suit.Clubs">
            <summary>
            â™£
            </summary>
        </member>
        <member name="F:Skunked.Cards.Suit.Diamonds">
            <summary>
            â™¦
            </summary>
        </member>
        <member name="F:Skunked.Cards.Suit.Hearts">
            <summary>
            â™¥
            </summary>
        </member>
        <member name="F:Skunked.Cards.Suit.Spades">
            <summary>
            â™ 
            </summary>
        </member>
        <member name="T:Skunked.Cards.Value.AceLowFaceTenCardValueStrategy">
            <summary>
            Returns value of a card.  Ace = 1, 9 = 9, face cards  = 10.
            </summary>
        </member>
        <member name="M:Skunked.Cards.Value.AceLowFaceTenCardValueStrategy.GetValue(Skunked.Cards.Card)">
            <summary>
            Get the play value.
            </summary>
            <param name="card">The card to get the value for.</param>
            <returns>Value of the card for the play.</returns>
        </member>
        <member name="T:Skunked.Cribbage">
            <summary>
            The class for creating and modeling a game of Cribbage. "Plays" are validated and stored as a stream of events. Event listeners allow de-normalized state to be created from the stream.
            </summary>
        </member>
        <member name="M:Skunked.Cribbage.#ctor(System.Collections.Generic.IEnumerable{System.Int32},Skunked.Rules.GameRules,System.Collections.Generic.IEnumerable{Skunked.Domain.Events.IEventListener})">
            <summary>
            Initializes a new instance of the <see cref="T:Skunked.Cribbage"/> class.
            </summary>
            <param name="players">Players in order by index and the value of the player id.</param>
            <param name="rules">The set of rules for the game.</param>
            <param name="eventListeners">Listen to all game events.</param>
        </member>
        <member name="P:Skunked.Cribbage.State">
            <summary>
            Gets the state of the game.
            </summary>
        </member>
        <member name="P:Skunked.Cribbage.Stream">
            <summary>
            Gets set of events that have occurred in the game.
            </summary>
        </member>
        <member name="M:Skunked.Cribbage.CutCard(Skunked.Domain.Commands.CutCardCommand)">
            <summary>
            Cut the deck.
            </summary>
            <param name="command">The command to execute.</param>
        </member>
        <member name="M:Skunked.Cribbage.ThrowCards(Skunked.Domain.Commands.ThrowCardsCommand)">
            <summary>
            Throw cards to the crib.
            </summary>
            <param name="command">Command to throw cards.</param>
        </member>
        <member name="M:Skunked.Cribbage.PlayCard(Skunked.Domain.Commands.PlayCardCommand)">
            <summary>
            Play a card.
            </summary>
            <param name="command">Command to play card.</param>
        </member>
        <member name="M:Skunked.Cribbage.CountHand(Skunked.Domain.Commands.CountHandCommand)">
            <summary>
            Count a players hand.
            </summary>
            <param name="command">Command to count hand.</param>
        </member>
        <member name="M:Skunked.Cribbage.CountCrib(Skunked.Domain.Commands.CountCribCommand)">
            <summary>
            Count a players crib.
            </summary>
            <param name="command">The id of the player.</param>
        </member>
        <member name="T:Skunked.Domain.Commands.CommandBase">
            <summary>
            Base class for all commands.
            </summary>
        </member>
        <member name="M:Skunked.Domain.Commands.CommandBase.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Skunked.Domain.Commands.CommandBase"/> class.
            </summary>
            <param name="playerId">The id of player.</param>
        </member>
        <member name="P:Skunked.Domain.Commands.CommandBase.PlayerId">
            <summary>
            Gets the id of the player associated with the command.
            </summary>
        </member>
        <member name="T:Skunked.Domain.Commands.CountCribCommand">
            <summary>
            Command to count the points in the crib.
            </summary>
        </member>
        <member name="M:Skunked.Domain.Commands.CountCribCommand.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Skunked.Domain.Commands.CountCribCommand"/> class.
            </summary>
            <param name="playerId">The id of the player associated with the command for the crib.</param>
            <param name="score">The score that was counted.</param>
        </member>
        <member name="P:Skunked.Domain.Commands.CountCribCommand.Score">
            <summary>
            Gets the score that was counted for the crib.
            </summary>
        </member>
        <member name="T:Skunked.Domain.Commands.CountHandCommand">
            <summary>
            Command to count the points in a hand.
            </summary>
        </member>
        <member name="M:Skunked.Domain.Commands.CountHandCommand.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Skunked.Domain.Commands.CountHandCommand"/> class.
            </summary>
            <param name="playerId">Id of the player.</param>
            <param name="score">Score counted.</param>
        </member>
        <member name="P:Skunked.Domain.Commands.CountHandCommand.Score">
            <summary>
            Gets the score that was counted.
            </summary>
        </member>
        <member name="T:Skunked.Domain.Commands.CutCardCommand">
            <summary>
            Command to cut the deck.
            </summary>
        </member>
        <member name="M:Skunked.Domain.Commands.CutCardCommand.#ctor(System.Int32,Skunked.Cards.Card)">
            <summary>
            Initializes a new instance of the <see cref="T:Skunked.Domain.Commands.CutCardCommand"/> class.
            </summary>
            <param name="playerId">The id of player.</param>
            <param name="cutCard">Card that was cut.</param>
        </member>
        <member name="P:Skunked.Domain.Commands.CutCardCommand.CutCard">
            <summary>
            Gets card that was cut.
            </summary>
        </member>
        <member name="T:Skunked.Domain.Commands.PlayCardCommand">
            <summary>
            Command to play a card.
            </summary>
        </member>
        <member name="M:Skunked.Domain.Commands.PlayCardCommand.#ctor(System.Int32,Skunked.Cards.Card)">
            <summary>
            Initializes a new instance of the <see cref="T:Skunked.Domain.Commands.PlayCardCommand"/> class.
            </summary>
            <param name="playerId">The id of the player associated with the command.</param>
            <param name="card">The card being played.</param>
        </member>
        <member name="P:Skunked.Domain.Commands.PlayCardCommand.Card">
            <summary>
            Gets card being played.
            </summary>
        </member>
        <member name="T:Skunked.Domain.Commands.ThrowCardsCommand">
            <summary>
            Command to discard cards to the crib.
            </summary>
        </member>
        <member name="M:Skunked.Domain.Commands.ThrowCardsCommand.#ctor(System.Int32,System.Collections.Generic.IEnumerable{Skunked.Cards.Card})">
            <summary>
            Initializes a new instance of the <see cref="T:Skunked.Domain.Commands.ThrowCardsCommand"/> class.
            </summary>
            <param name="playerId">The id of player.</param>
            <param name="cribCards">Cards being discarded to crib.</param>
        </member>
        <member name="P:Skunked.Domain.Commands.ThrowCardsCommand.CribCards">
            <summary>
            Gets cards being discarded to crib.
            </summary>
        </member>
        <member name="T:Skunked.Domain.EventStream">
            <summary>
            A stream of events.
            </summary>
        </member>
        <member name="M:Skunked.Domain.EventStream.#ctor(System.Collections.Generic.IEnumerable{Skunked.Domain.Events.IEventListener})">
            <summary>
            Initializes a new instance of the <see cref="T:Skunked.Domain.EventStream"/> class.
            </summary>
            <param name="eventListeners">Listeners for events.</param>
        </member>
        <member name="M:Skunked.Domain.EventStream.Add(Skunked.Domain.Events.StreamEvent)">
            <summary>
            Add an event to the stream.
            </summary>
            <param name="event">The event to add.</param>
        </member>
        <member name="M:Skunked.Domain.EventStream.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Skunked.Domain.EventStream.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="T:Skunked.Domain.Events.CardCutEvent">
            <summary>
            Event when a card has been cut.
            </summary>
        </member>
        <member name="M:Skunked.Domain.Events.CardCutEvent.#ctor(System.Guid,System.Int32,System.Int32,Skunked.Cards.Card)">
            <summary>
            Initializes a new instance of the <see cref="T:Skunked.Domain.Events.CardCutEvent"/> class.
            </summary>
            <param name="gameId">Unique identifier of the game.</param>
            <param name="version">The version of the game.</param>
            <param name="playerId">The id of the player.</param>
            <param name="cutCard">Card that was cut.</param>
        </member>
        <member name="P:Skunked.Domain.Events.CardCutEvent.PlayerId">
            <summary>
            Gets the player's id who cut the card.
            </summary>
        </member>
        <member name="P:Skunked.Domain.Events.CardCutEvent.CutCard">
            <summary>
            Gets the card that was cut.
            </summary>
        </member>
        <member name="T:Skunked.Domain.Events.CardPlayedEvent">
            <summary>
            Event when a card has been played.
            </summary>
        </member>
        <member name="M:Skunked.Domain.Events.CardPlayedEvent.#ctor(System.Guid,System.Int32,System.Int32,Skunked.Cards.Card)">
            <summary>
            Initializes a new instance of the <see cref="T:Skunked.Domain.Events.CardPlayedEvent"/> class.
            </summary>
            <param name="gameId">Unique identifier of the game.</param>
            <param name="version">The version of the game.</param>
            <param name="playerId">The id of the player.</param>
            <param name="played">The card played.</param>
        </member>
        <member name="P:Skunked.Domain.Events.CardPlayedEvent.PlayerId">
            <summary>
            Gets the player id.
            </summary>
        </member>
        <member name="P:Skunked.Domain.Events.CardPlayedEvent.Played">
            <summary>
            Gets the Card being played.
            </summary>
        </member>
        <member name="T:Skunked.Domain.Events.CardsThrownEvent">
            <summary>
            Event when a cards have been thrown to the crib.
            </summary>
        </member>
        <member name="M:Skunked.Domain.Events.CardsThrownEvent.#ctor(System.Guid,System.Int32,System.Int32,System.Collections.Generic.List{Skunked.Cards.Card})">
            <summary>
            Initializes a new instance of the <see cref="T:Skunked.Domain.Events.CardsThrownEvent"/> class.
            </summary>
            <param name="gameId">Unique identifier of the game.</param>
            <param name="version">The version of the game.</param>
            <param name="playerId">The id of the player.</param>
            <param name="thrown">The cards thrown to the crib.</param>
        </member>
        <member name="P:Skunked.Domain.Events.CardsThrownEvent.PlayerId">
            <summary>
            Gets the player id.
            </summary>
        </member>
        <member name="P:Skunked.Domain.Events.CardsThrownEvent.Thrown">
            <summary>
            Gets the cards throw to the crib.
            </summary>
        </member>
        <member name="T:Skunked.Domain.Events.CribCountedEvent">
            <summary>
            Event when the crib has been counted.
            </summary>
        </member>
        <member name="M:Skunked.Domain.Events.CribCountedEvent.#ctor(System.Guid,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Skunked.Domain.Events.CribCountedEvent"/> class.
            </summary>
            <param name="gameId">Unique identifier of the game.</param>
            <param name="version">The version of the game.</param>
            <param name="playerId">The id of the player.</param>
            <param name="countedScore">The counted score.</param>
        </member>
        <member name="P:Skunked.Domain.Events.CribCountedEvent.PlayerId">
            <summary>
            Gets the player id.
            </summary>
        </member>
        <member name="P:Skunked.Domain.Events.CribCountedEvent.CountedScore">
            <summary>
            Gets the score the player counted for the crib.
            </summary>
        </member>
        <member name="T:Skunked.Domain.Events.DeckShuffledEvent">
            <summary>
            Event when the deck has been shuffled.
            </summary>
        </member>
        <member name="M:Skunked.Domain.Events.DeckShuffledEvent.#ctor(System.Guid,System.Int32,System.Collections.Generic.List{Skunked.Cards.Card})">
            <summary>
            Initializes a new instance of the <see cref="T:Skunked.Domain.Events.DeckShuffledEvent"/> class.
            </summary>
            <param name="gameId">Unique identifier of the game.</param>
            <param name="version">The version of the game.</param>
            <param name="deck">The shuffled deck.</param>
        </member>
        <member name="P:Skunked.Domain.Events.DeckShuffledEvent.Deck">
            <summary>
            Gets the new state of the deck after the shuffle.
            </summary>
        </member>
        <member name="T:Skunked.Domain.Events.GameCompletedEvent">
            <summary>
            Event when the game has completed.
            </summary>
        </member>
        <member name="M:Skunked.Domain.Events.GameCompletedEvent.#ctor(System.Guid,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Skunked.Domain.Events.GameCompletedEvent"/> class.
            </summary>
            <param name="gameId">Unique identifier of the game.</param>
            <param name="version">The version of the game.</param>
        </member>
        <member name="T:Skunked.Domain.Events.GameStartedEvent">
            <summary>
            Event when the game has started.
            </summary>
        </member>
        <member name="M:Skunked.Domain.Events.GameStartedEvent.#ctor(System.Guid,System.Int32,System.Collections.Generic.List{System.Int32},Skunked.Rules.GameRules)">
            <summary>
            Initializes a new instance of the <see cref="T:Skunked.Domain.Events.GameStartedEvent"/> class.
            </summary>
            <param name="gameId">Unique identifier of the game.</param>
            <param name="version">The version of the game.</param>
            <param name="players">The players.</param>
            <param name="rules">The set of rules for the game.</param>
        </member>
        <member name="P:Skunked.Domain.Events.GameStartedEvent.Players">
            <summary>
            Gets the set of players.
            </summary>
        </member>
        <member name="P:Skunked.Domain.Events.GameStartedEvent.Rules">
            <summary>
            Gets the set of rules for the game.
            </summary>
        </member>
        <member name="T:Skunked.Domain.Events.HandCountedEvent">
            <summary>
            Event when a hand has been counted.
            </summary>
        </member>
        <member name="M:Skunked.Domain.Events.HandCountedEvent.#ctor(System.Guid,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Skunked.Domain.Events.HandCountedEvent"/> class.
            </summary>
            <param name="gameId">Unique identifier of the game.</param>
            <param name="version">The version of the game.</param>
            <param name="playerId">The id of the player.</param>
            <param name="countedScore">Gets the counted score.</param>
        </member>
        <member name="P:Skunked.Domain.Events.HandCountedEvent.PlayerId">
            <summary>
            Gets the player id.
            </summary>
        </member>
        <member name="P:Skunked.Domain.Events.HandCountedEvent.CountedScore">
            <summary>
            Gets the counted score.
            </summary>
        </member>
        <member name="T:Skunked.Domain.Events.HandsDealtEvent">
            <summary>
            Event when all hands have been dealt.
            </summary>
        </member>
        <member name="M:Skunked.Domain.Events.HandsDealtEvent.#ctor(System.Guid,System.Int32,System.Collections.Generic.List{Skunked.Players.PlayerHand})">
            <summary>
            Initializes a new instance of the <see cref="T:Skunked.Domain.Events.HandsDealtEvent"/> class.
            </summary>
            <param name="gameId">Unique identifier of the game.</param>
            <param name="version">The version of the game.</param>
            <param name="hands">All player hands have been dealt.</param>
        </member>
        <member name="P:Skunked.Domain.Events.HandsDealtEvent.Hands">
            <summary>
            All of the player hands that were dealt.
            </summary>
        </member>
        <member name="T:Skunked.Domain.Events.IEventListener">
            <summary>
            An event listener.
            </summary>
        </member>
        <member name="M:Skunked.Domain.Events.IEventListener.Notify(Skunked.Domain.Events.StreamEvent)">
            <summary>
            Notify when an event occurs.
            </summary>
            <param name="event">The occurred event.</param>
        </member>
        <member name="T:Skunked.Domain.Events.PlayFinishedEvent">
            <summary>
            Event when the play has completed.
            </summary>
        </member>
        <member name="M:Skunked.Domain.Events.PlayFinishedEvent.#ctor(System.Guid,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Skunked.Domain.Events.PlayFinishedEvent"/> class.
            </summary>
            <param name="gameId">Unique identifier of the game.</param>
            <param name="version">The version of the game.</param>
            <param name="round">The round.</param>
        </member>
        <member name="P:Skunked.Domain.Events.PlayFinishedEvent.Round">
            <summary>
            Gets the round.
            </summary>
        </member>
        <member name="T:Skunked.Domain.Events.PlayStartedEvent">
            <summary>
            Event when the play has started.
            </summary>
        </member>
        <member name="M:Skunked.Domain.Events.PlayStartedEvent.#ctor(System.Guid,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Skunked.Domain.Events.PlayStartedEvent"/> class.
            </summary>
            <param name="gameId">Unique identifier of the game.</param>
            <param name="version">The version of the game.</param>
            <param name="round">The round.</param>
        </member>
        <member name="P:Skunked.Domain.Events.PlayStartedEvent.Round">
            <summary>
            The round.
            </summary>
        </member>
        <member name="T:Skunked.Domain.Events.RoundStartedEvent">
            <summary>
            Event when a round started.
            </summary>
        </member>
        <member name="M:Skunked.Domain.Events.RoundStartedEvent.#ctor(System.Guid,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Skunked.Domain.Events.RoundStartedEvent"/> class.
            </summary>
            <param name="gameId">Unique identifier of the game.</param>
            <param name="version">The version of the game.</param>
        </member>
        <member name="T:Skunked.Domain.Events.StarterCardSelectedEvent">
            <summary>
            Event when a starter card has been selected.
            </summary>
        </member>
        <member name="M:Skunked.Domain.Events.StarterCardSelectedEvent.#ctor(System.Guid,System.Int32,Skunked.Cards.Card)">
            <summary>
            Initializes a new instance of the <see cref="T:Skunked.Domain.Events.StarterCardSelectedEvent"/> class.
            </summary>
            <param name="gameId">Unique identifier of the game.</param>
            <param name="version">The version of the game.</param>
            <param name="starter">The starter card that was cut.</param>
        </member>
        <member name="P:Skunked.Domain.Events.StarterCardSelectedEvent.Starter">
            <summary>
            Gets the starter card.
            </summary>
        </member>
        <member name="T:Skunked.Domain.Events.StreamEvent">
            <summary>
            The base cribbage game event.
            </summary>
        </member>
        <member name="M:Skunked.Domain.Events.StreamEvent.#ctor(System.Guid,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Skunked.Domain.Events.StreamEvent"/> class.
            </summary>
            <param name="gameId">Unique identifier of the game.</param>
            <param name="version">The version of the game.</param>
        </member>
        <member name="P:Skunked.Domain.Events.StreamEvent.GameId">
            <summary>
            Gets identifier of the game.
            </summary>
        </member>
        <member name="P:Skunked.Domain.Events.StreamEvent.Version">
            <summary>
            Gets version of the game state.
            </summary>
        </member>
        <member name="P:Skunked.Domain.Events.StreamEvent.Occurred">
            <summary>
            Gets the time stamp this event took place.
            </summary>
        </member>
        <member name="T:Skunked.Domain.State.GameState">
            <summary>
            Snapshot of a game's state.
            </summary>
        </member>
        <member name="P:Skunked.Domain.State.GameState.Id">
            <summary>
            Gets or sets unique identifier of the game.
            </summary>
        </member>
        <member name="P:Skunked.Domain.State.GameState.Version">
            <summary>
            Gets or sets version of the game.  Each event creates a new version of the game.
            </summary>
        </member>
        <member name="P:Skunked.Domain.State.GameState.PlayerIds">
            <summary>
            Gets or sets player ids.
            </summary>
        </member>
        <member name="P:Skunked.Domain.State.GameState.IndividualScores">
            <summary>
            Gets or sets the players scores.
            </summary>
        </member>
        <member name="P:Skunked.Domain.State.GameState.TeamScores">
            <summary>
            Gets or sets the team scores.
            </summary>
        </member>
        <member name="P:Skunked.Domain.State.GameState.GameRules">
            <summary>
            Gets or sets the set of rules for the game.
            </summary>
        </member>
        <member name="P:Skunked.Domain.State.GameState.OpeningRound">
            <summary>
            Gets or set the opening round.
            </summary>
        </member>
        <member name="P:Skunked.Domain.State.GameState.Rounds">
            <summary>
            Gets or set the set of rounds.
            </summary>
        </member>
        <member name="P:Skunked.Domain.State.GameState.StartedAt">
            <summary>
            Gets or sets the time stamp of when the game started.
            </summary>
        </member>
        <member name="P:Skunked.Domain.State.GameState.LastUpdated">
            <summary>
            Gets or sets the time stamp of when the last event occurred.
            </summary>
        </member>
        <member name="P:Skunked.Domain.State.GameState.CompletedAt">
            <summary>
            Gets or sets the time stamp of when the game we completed.
            </summary>
        </member>
        <member name="T:Skunked.Domain.State.GameStateBuilder">
            <summary>
            Builds the GameState from the game events.
            </summary>
        </member>
        <member name="M:Skunked.Domain.State.GameStateBuilder.#ctor(Skunked.Domain.State.GameState)">
            <summary>
            Initializes a new instance of the <see cref="T:Skunked.Domain.State.GameStateBuilder"/> class.
            </summary>
        </member>
        <member name="M:Skunked.Domain.State.GameStateBuilder.Handle(Skunked.Domain.Events.GameStartedEvent,Skunked.Domain.State.GameState)">
            <summary>
            Handle cref="GameStartedEvent" event.
            </summary>
            <param name="streamEvent">Event to handle.</param>
            <param name="gameState">The game state.</param>
        </member>
        <member name="M:Skunked.Domain.State.GameStateBuilder.Handle(Skunked.Domain.Events.DeckShuffledEvent,Skunked.Domain.State.GameState)">
            <summary>
            Handle cref="DeckShuffledEvent" event.
            </summary>
            <param name="streamEvent">Event to handle.</param>
            <param name="gameState">The game state.</param>
        </member>
        <member name="M:Skunked.Domain.State.GameStateBuilder.Handle(Skunked.Domain.Events.CardCutEvent,Skunked.Domain.State.GameState)">
            <summary>
            Handle cref="CardCutEvent" event.
            </summary>
            <param name="streamEvent">Event to handle.</param>
            <param name="gameState">The game state.</param>
        </member>
        <member name="M:Skunked.Domain.State.GameStateBuilder.Handle(Skunked.Domain.Events.PlayStartedEvent,Skunked.Domain.State.GameState)">
            <summary>
            Handle cref="PlayStartedEvent" event.
            </summary>
            <param name="streamEvent">Event to handle</param>
            <param name="gameState">The game state.</param>
        </member>
        <member name="M:Skunked.Domain.State.GameStateBuilder.Handle(Skunked.Domain.Events.RoundStartedEvent,Skunked.Domain.State.GameState)">
            <summary>
            Handle cref="RoundStartedEvent" event.
            </summary>
            <param name="streamEvent">Event to handle.</param>
            <param name="gameState">The game state.</param>
        </member>
        <member name="M:Skunked.Domain.State.GameStateBuilder.Handle(Skunked.Domain.Events.HandsDealtEvent,Skunked.Domain.State.GameState)">
            <summary>
            Handle cref="HandsDealtEvent" event.
            </summary>
            <param name="streamEvent">Event to handle.</param>
            <param name="gameState">The game state.</param>
        </member>
        <member name="M:Skunked.Domain.State.GameStateBuilder.Handle(Skunked.Domain.Events.CardsThrownEvent,Skunked.Domain.State.GameState)">
            <summary>
            Handle cref="CardsThrownEvent" event.
            </summary>
            <param name="streamEvent">Event to handle.</param>
            <param name="gameState">The game state.</param>
        </member>
        <member name="M:Skunked.Domain.State.GameStateBuilder.Handle(Skunked.Domain.Events.StarterCardSelectedEvent,Skunked.Domain.State.GameState)">
            <summary>
            Handle cref="StarterCardSelectedEvent" event.
            </summary>
            <param name="streamEvent">Event to handle.</param>
            <param name="gameState">The game state.</param>
        </member>
        <member name="M:Skunked.Domain.State.GameStateBuilder.Handle(Skunked.Domain.Events.CardPlayedEvent,Skunked.Domain.State.GameState)">
            <summary>
            Handle cref="CardPlayedEvent" event.
            </summary>
            <param name="streamEvent">Event to handle.</param>
            <param name="gameState">The game state.</param>
        </member>
        <member name="M:Skunked.Domain.State.GameStateBuilder.Handle(Skunked.Domain.Events.HandCountedEvent,Skunked.Domain.State.GameState)">
            <summary>
            Handle cref="HandCountedEvent" event.
            </summary>
            <param name="streamEvent">Event to handle.</param>
            <param name="gameState">The game state.</param>
        </member>
        <member name="M:Skunked.Domain.State.GameStateBuilder.Handle(Skunked.Domain.Events.CribCountedEvent,Skunked.Domain.State.GameState)">
            <summary>
            Handle cref="CribCountedEvent" event.
            </summary>
            <param name="streamEvent">Event to handle.</param>
            <param name="gameState">The game state.</param>
        </member>
        <member name="T:Skunked.Domain.State.OpeningRound">
            <summary>
            State of the opening round
            </summary>
        </member>
        <member name="P:Skunked.Domain.State.OpeningRound.Deck">
            <summary>
            State of the deck
            </summary>
        </member>
        <member name="P:Skunked.Domain.State.OpeningRound.CutCards">
            <summary>
            State of the cut cards.
            </summary>
        </member>
        <member name="P:Skunked.Domain.State.OpeningRound.Complete">
            <summary>
            Is the opening round complete.
            </summary>
        </member>
        <member name="P:Skunked.Domain.State.OpeningRound.WinningPlayerCut">
            <summary>
            The index of the winning player cut.
            </summary>
        </member>
        <member name="T:Skunked.Domain.State.PlayerIdCard">
            <summary>
            A player id and a card.
            </summary>
        </member>
        <member name="P:Skunked.Domain.State.PlayerIdCard.Player">
            <summary>
            Gets the playerId.
            </summary>
        </member>
        <member name="P:Skunked.Domain.State.PlayerIdCard.Card">
            <summary>
            Gets the card.
            </summary>
        </member>
        <member name="T:Skunked.Domain.State.PlayerScore">
            <summary>
            Player Id and a score.
            </summary>
        </member>
        <member name="P:Skunked.Domain.State.PlayerScore.Player">
            <summary>
            Gets or sets player Id.
            </summary>
        </member>
        <member name="P:Skunked.Domain.State.PlayerScore.Score">
            <summary>
            Gets or sets the player's score.
            </summary>
        </member>
        <member name="T:Skunked.Domain.State.RoundState">
            <summary>
            The state of the Round.
            </summary>
        </member>
        <member name="P:Skunked.Domain.State.RoundState.Starter">
            <summary>
            Gets or sets the stater card.
            </summary>
        </member>
        <member name="P:Skunked.Domain.State.RoundState.Round">
            <summary>
            Gets or sets round number.
            </summary>
        </member>
        <member name="P:Skunked.Domain.State.RoundState.DealtCards">
            <summary>
            Gets or sets the set of cards initially dealt to all players.
            </summary>
        </member>
        <member name="P:Skunked.Domain.State.RoundState.Hands">
            <summary>
            Gets or sets the set of cards in each players hand after thrown to the crib.
            </summary>
        </member>
        <member name="T:Skunked.Domain.State.TeamScore">
            <summary>
            The team and their score.
            </summary>
        </member>
        <member name="P:Skunked.Domain.State.TeamScore.Players">
            <summary>
            Player id's on a team.
            </summary>
        </member>
        <member name="P:Skunked.Domain.State.TeamScore.Score">
            <summary>
            The team's score.
            </summary>
        </member>
        <member name="T:Skunked.Domain.Validations.CountCribCommandValidation">
            <summary>
            Validates <see cref="T:Skunked.Domain.Commands.CountCribCommand"/> command.
            </summary>
        </member>
        <member name="M:Skunked.Domain.Validations.CountCribCommandValidation.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Skunked.Domain.Validations.CountCribCommandValidation"/> class.
            </summary>
        </member>
        <member name="M:Skunked.Domain.Validations.CountCribCommandValidation.Validate(Skunked.Domain.State.GameState,Skunked.Domain.Commands.CountCribCommand)">
            <inheritdoc />
        </member>
        <member name="T:Skunked.Domain.Validations.CountHandCommandValidation">
            <summary>
            Validates <see cref="T:Skunked.Domain.Commands.CountHandCommand"/> command.
            </summary>
        </member>
        <member name="M:Skunked.Domain.Validations.CountHandCommandValidation.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Skunked.Domain.Validations.CountHandCommandValidation"/> class.
            </summary>
        </member>
        <member name="M:Skunked.Domain.Validations.CountHandCommandValidation.Validate(Skunked.Domain.State.GameState,Skunked.Domain.Commands.CountHandCommand)">
            <inheritdoc />
        </member>
        <member name="T:Skunked.Domain.Validations.CutCardCommandValidation">
            <summary>
            Validates <see cref="T:Skunked.Domain.Commands.CutCardCommand"/> command.
            </summary>
        </member>
        <member name="M:Skunked.Domain.Validations.CutCardCommandValidation.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Skunked.Domain.Validations.CutCardCommandValidation"/> class.
            </summary>
        </member>
        <member name="M:Skunked.Domain.Validations.CutCardCommandValidation.Validate(Skunked.Domain.State.GameState,Skunked.Domain.Commands.CutCardCommand)">
            <inheritdoc />
        </member>
        <member name="T:Skunked.Domain.Validations.IValidation`1">
            <summary>
            Validate commands are valid given the current state of the game.
            </summary>
            <typeparam name="T">Type of command to be validated.</typeparam>
        </member>
        <member name="M:Skunked.Domain.Validations.IValidation`1.Validate(Skunked.Domain.State.GameState,`0)">
            <summary>
            Exception is thrown if command is not valid when applied to the current state of the game.
            </summary>
            <param name="gameState">The current state of the game.</param>
            <param name="command">The command being validated.</param>
        </member>
        <member name="T:Skunked.Domain.Validations.PlayCardCommandValidation">
            <summary>
            Validates <see cref="T:Skunked.Domain.Commands.PlayCardCommand"/> command.
            </summary>
        </member>
        <member name="M:Skunked.Domain.Validations.PlayCardCommandValidation.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Skunked.Domain.Validations.PlayCardCommandValidation"/> class.
            </summary>
        </member>
        <member name="M:Skunked.Domain.Validations.PlayCardCommandValidation.Validate(Skunked.Domain.State.GameState,Skunked.Domain.Commands.PlayCardCommand)">
            <inheritdoc />
        </member>
        <member name="T:Skunked.Domain.Validations.ThrowCardsCommandValidation">
            <summary>
            Validates <see cref="T:Skunked.Domain.Commands.ThrowCardsCommand"/> command.
            </summary>
        </member>
        <member name="M:Skunked.Domain.Validations.ThrowCardsCommandValidation.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Skunked.Domain.Validations.ThrowCardsCommandValidation"/> class.
            </summary>
        </member>
        <member name="M:Skunked.Domain.Validations.ThrowCardsCommandValidation.Validate(Skunked.Domain.State.GameState,Skunked.Domain.Commands.ThrowCardsCommand)">
            <inheritdoc />
        </member>
        <member name="T:Skunked.Domain.Validations.ValidationBase">
            <summary>
            Base class for validating cribbage commands.
            </summary>
        </member>
        <member name="M:Skunked.Domain.Validations.ValidationBase.ValidateCore(Skunked.Domain.State.GameState,System.Int32,System.Int32)">
            <summary>
            Validate common elements of commands.
            </summary>
            <param name="gameState">Current game state.</param>
            <param name="playerId">The id of the player.</param>
            <param name="round">Round number.</param>
        </member>
        <member name="M:Skunked.Domain.Validations.ValidationBase.CheckEndOfGame(Skunked.Domain.State.GameState)">
            <summary>
            Throw if game is complete..
            </summary>
            <param name="gameState">Current state of the game.</param>
        </member>
        <member name="T:Skunked.Exceptions.GameFinishedException">
            <summary>
            An exception to stop the game.
            </summary>
        </member>
        <member name="M:Skunked.Exceptions.GameFinishedException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Skunked.Exceptions.GameFinishedException"/> class.
            </summary>
        </member>
        <member name="T:Skunked.Exceptions.InvalidCribbageOperationException">
            <summary>
            An invalid move was attempted in the game.
            </summary>
        </member>
        <member name="M:Skunked.Exceptions.InvalidCribbageOperationException.#ctor(Skunked.Exceptions.InvalidCribbageOperation)">
            <summary>
            Initializes a new instance of the <see cref="T:Skunked.Exceptions.InvalidCribbageOperationException"/> class.
            </summary>
            <param name="operation">The type of operation attempted.</param>
        </member>
        <member name="P:Skunked.Exceptions.InvalidCribbageOperationException.Operation">
            <summary>
            Gets the invalid cribbage operation that was attempted.
            </summary>
        </member>
        <member name="T:Skunked.Exceptions.InvalidCribbageOperation">
            <summary>
            Set of exception types that can be thrown by the game when a rule is violated.
            </summary>
        </member>
        <member name="F:Skunked.Exceptions.InvalidCribbageOperation.CutCardPlayerAlreadyCut">
            <summary>
            Player already cut a card from the deck.
            </summary>
        </member>
        <member name="F:Skunked.Exceptions.InvalidCribbageOperation.CutCardCardAlreadyCut">
            <summary>
            A player already this card from the deck.
            </summary>
        </member>
        <member name="F:Skunked.Exceptions.InvalidCribbageOperation.NotPlayersTurn">
            <summary>
            Player attempted to play when not their turn.
            </summary>
        </member>
        <member name="F:Skunked.Exceptions.InvalidCribbageOperation.CardHasBeenPlayed">
            <summary>
            The played card has already been played.
            </summary>
        </member>
        <member name="F:Skunked.Exceptions.InvalidCribbageOperation.CardsHaveBeenThrown">
            <summary>
            Player can not rethrow their cards.
            </summary>
        </member>
        <member name="F:Skunked.Exceptions.InvalidCribbageOperation.InvalidPlayer">
            <summary>
            It is not the given players' turn.
            </summary>
        </member>
        <member name="F:Skunked.Exceptions.InvalidCribbageOperation.InvalidStateForPlay">
            <summary>
            The game is not currently in the play.
            </summary>
        </member>
        <member name="F:Skunked.Exceptions.InvalidCribbageOperation.InvalidCard">
            <summary>
            Card can not be used.  This may be because the player was not dealt the card.
            </summary>
        </member>
        <member name="F:Skunked.Exceptions.InvalidCribbageOperation.InvalidStateForCount">
            <summary>
            The hand can not be counted in the current state of the game.
            </summary>
        </member>
        <member name="F:Skunked.Exceptions.InvalidCribbageOperation.InvalidStateForCribCount">
            <summary>
            The crib can not be counted in the current state of the game.
            </summary>
        </member>
        <member name="F:Skunked.Exceptions.InvalidCribbageOperation.InvalidShowCount">
            <summary>
            The player announced a score that was not possible with the given hand.
            </summary>
        </member>
        <member name="F:Skunked.Exceptions.InvalidCribbageOperation.PlayerHasAlreadyCounted">
            <summary>
            The player has already counted their hand in this round.
            </summary>
        </member>
        <member name="F:Skunked.Exceptions.InvalidCribbageOperation.InvalidRequest">
            <summary>
            The parameters of the game were violated.
            </summary>
        </member>
        <member name="T:Skunked.Game.GameRunner">
            <summary>
            Runs a game of cribbage with the given player strategies provided.
            Used for testing, AI comparison, or any other need to run through many games automatically.
            </summary>
        </member>
        <member name="M:Skunked.Game.GameRunner.#ctor(Skunked.Cards.Deck)">
            <summary>
            Initializes a new instance of the <see cref="T:Skunked.Game.GameRunner"/> class.
            </summary>
            <param name="deck">The deck to use.</param>
        </member>
        <member name="M:Skunked.Game.GameRunner.Run(System.Collections.Generic.List{Skunked.Players.IGameRunnerPlayer},Skunked.Rules.WinningScore)">
            <summary>
            Run a game of cribbage using the provided <see cref="T:Skunked.Players.IGameRunnerPlayer"/>.
            </summary>
            <param name="players">The players.</param>
            <param name="winningScore">The winning score.</param>
            <returns>The game of cribbage after it has completed.</returns>
        </member>
        <member name="T:Skunked.Players.IGameRunnerPlayer">
            <summary>
            An interface to implement an automated player's decisions.
            </summary>
        </member>
        <member name="P:Skunked.Players.IGameRunnerPlayer.Id">
            <summary>
            Gets the id of the player.
            </summary>
        </member>
        <member name="M:Skunked.Players.IGameRunnerPlayer.DetermineCardsToThrow(System.Collections.Generic.IEnumerable{Skunked.Cards.Card})">
            <summary>
            Deal Hand and return cards that will go back in crib.
            </summary>
            <param name="hand">The set of cards dealt to the player.</param>
            <returns>Set of Cards to throw in crib.</returns>
        </member>
        <member name="M:Skunked.Players.IGameRunnerPlayer.DetermineCardsToPlay(Skunked.Rules.GameRules,System.Collections.Generic.List{Skunked.Cards.Card},System.Collections.Generic.List{Skunked.Cards.Card})">
            <summary>
            Determine card to throw to play pile.
            </summary>
            <param name="gameRules">The rules of the game.</param>
            <param name="pile">Cards currently in the pile.</param>
            <param name="handLeft">Cards not yet played from hand.</param>
            <returns>The card to throw to the pile.</returns>
        </member>
        <member name="M:Skunked.Players.IGameRunnerPlayer.CutCards(System.Collections.Generic.IEnumerable{Skunked.Cards.Card})">
            <summary>
            Get the card to cut.
            </summary>
            <param name="cardsToChoose">Cards to choose from.</param>
            <returns>The cut card.</returns>
        </member>
        <member name="M:Skunked.Players.IGameRunnerPlayer.CountHand(Skunked.Cards.Card,System.Collections.Generic.IEnumerable{Skunked.Cards.Card})">
            <summary>
            Count the score with the given hand and starter starter.
            </summary>
            <param name="starter">The starter card or cut.</param>
            <param name="hand">The player's hand.</param>
            <returns>The points counted.</returns>
        </member>
        <member name="T:Skunked.Players.PlayerHand">
            <summary>
            A player id and their hand.
            </summary>
        </member>
        <member name="M:Skunked.Players.PlayerHand.#ctor(System.Int32,System.Collections.Generic.List{Skunked.Cards.Card})">
            <summary>
            Initializes a new instance of the <see cref="T:Skunked.Players.PlayerHand"/> class.
            </summary>
            <param name="playerId">The id of the player.</param>
            <param name="hand">The players hand.</param>
        </member>
        <member name="P:Skunked.Players.PlayerHand.PlayerId">
            <summary>
            Gets the id of the player.
            </summary>
        </member>
        <member name="P:Skunked.Players.PlayerHand.Hand">
            <summary>
            Gets the hand of the player.
            </summary>
        </member>
        <member name="T:Skunked.Rules.GameRules">
            <summary>
            Set of Cribbage rules.
            </summary>
        </member>
        <member name="M:Skunked.Rules.GameRules.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Skunked.Rules.GameRules"/> class.
            </summary>
        </member>
        <member name="M:Skunked.Rules.GameRules.#ctor(Skunked.Rules.WinningScore)">
            <summary>
            Initializes a new instance of the <see cref="T:Skunked.Rules.GameRules"/> class.
            </summary>
            <param name="winningScore">The winning score.</param>
        </member>
        <member name="P:Skunked.Rules.GameRules.HandSize">
            <summary>
            Gets size of hand after throwing cards to crib.
            </summary>
        </member>
        <member name="P:Skunked.Rules.GameRules.WinningScore">
            <summary>
            Gets the score a player needs to reach first to win the game.
            </summary>
        </member>
        <member name="M:Skunked.Rules.GameRules.GetDealSize(System.Int32)">
            <summary>
            Gets size of initial hand that dealer gives to each player.
            </summary>
            <param name="numberOfPlayers">Number of players.</param>
            <returns>Number of cards to be dealt to each player.</returns>
        </member>
        <member name="T:Skunked.Rules.GameRules.Points">
            <summary>
            The points scored for all combinations.
            </summary>
        </member>
        <member name="P:Skunked.Rules.GameRules.Points.Go">
            <summary>
            Gets points for laying the last card in a play where the count is under 31.
            </summary>
        </member>
        <member name="P:Skunked.Rules.GameRules.Points.MaxPlayCount">
            <summary>
            Gets max count a play can reach before starting a new play.
            </summary>
        </member>
        <member name="P:Skunked.Rules.GameRules.Points.Fifteen">
            <summary>
            Gets combination of two or more cards totaling exactly fifteen.
            </summary>
        </member>
        <member name="P:Skunked.Rules.GameRules.Points.Nibs">
            <summary>
            Gets jack is cut as the starter card. Points are awarded to dealer.
            </summary>
        </member>
        <member name="P:Skunked.Rules.GameRules.Points.Nobs">
            <summary>
            Gets one point for holding the Jack of the same suit as the starter card.
            </summary>
        </member>
        <member name="P:Skunked.Rules.GameRules.Points.Pair">
            <summary>
            Gets two cards of a kind.
            </summary>
        </member>
        <member name="P:Skunked.Rules.GameRules.Points.PairRoyal">
            <summary>
            Gets three cards of a kind.
            </summary>
        </member>
        <member name="P:Skunked.Rules.GameRules.Points.DoublePairRoyal">
            <summary>
            Gets four cards of a kind.
            </summary>
        </member>
        <member name="P:Skunked.Rules.GameRules.Points.Flush">
            <summary>
            Gets all four cards in the hand are of the same suit.
            </summary>
        </member>
        <member name="T:Skunked.Rules.WinningScore">
            <summary>
            Set of winning scores.
            </summary>
        </member>
        <member name="F:Skunked.Rules.WinningScore.Short61">
            <summary>
            Shortened 61 point game
            </summary>
        </member>
        <member name="F:Skunked.Rules.WinningScore.Standard121">
            <summary>
            Standard 121 point game
            </summary>
        </member>
        <member name="T:Skunked.Score.CalculatedResult">
            <summary>
            Result Calculated.
            </summary>
        </member>
        <member name="M:Skunked.Score.CalculatedResult.#ctor(Skunked.Score.CalculatedPoints,Skunked.Score.CalculatedCombinations)">
            <summary>
            Initializes a new instance of the <see cref="T:Skunked.Score.CalculatedResult"/> class.
            </summary>
            <param name="points"></param>
            <param name="combinations"></param>
        </member>
        <member name="T:Skunked.Score.CalculatedPoints">
            <summary>
            Set of points calculated.
            </summary>
        </member>
        <member name="T:Skunked.Score.CalculatedCombinations">
            <summary>
            A set of combinations that can score points.
            </summary>
        </member>
        <member name="M:Skunked.Score.CalculatedCombinations.#ctor(System.Collections.Generic.IList{System.Collections.Generic.IList{Skunked.Cards.Card}},System.Collections.Generic.IList{System.Collections.Generic.IList{Skunked.Cards.Card}},System.Collections.Generic.IList{System.Collections.Generic.IList{Skunked.Cards.Card}},System.Collections.Generic.IList{Skunked.Cards.Card},Skunked.Cards.Card)">
            <summary>
            A set of combinations that can score points.
            </summary>
        </member>
        <member name="T:Skunked.Score.ComboPossibleScores">
            <summary>
            Couple a set of cards with all of the possible scoring outcomes for that combo.
            </summary>
        </member>
        <member name="M:Skunked.Score.ComboPossibleScores.#ctor(System.Collections.Generic.IEnumerable{Skunked.Cards.Card},System.Collections.Generic.IEnumerable{Skunked.Score.ScoreWithCut})">
            <summary>
            Initializes a new instance of the <see cref="T:Skunked.Score.ComboPossibleScores"/> class.
            </summary>
            <param name="combo">The combination of cards.</param>
            <param name="possibleScores">Possible scores.</param>
        </member>
        <member name="P:Skunked.Score.ComboPossibleScores.Total">
            <summary>
            Total sum of all possible scores.
            </summary>
        </member>
        <member name="P:Skunked.Score.ComboPossibleScores.Combo">
            <summary>
            The given combination of cards.
            </summary>
        </member>
        <member name="P:Skunked.Score.ComboPossibleScores.PossibleScores">
            <summary>
            Possible scores given the combination and the starter.
            </summary>
        </member>
        <member name="T:Skunked.Score.ScoreCalculator">
            <summary>
            Calculates points scored in shows and plays.
            </summary>
        </member>
        <member name="M:Skunked.Score.ScoreCalculator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Skunked.Score.ScoreCalculator"/> class.
            </summary>
        </member>
        <member name="M:Skunked.Score.ScoreCalculator.CountCut(Skunked.Cards.Card)">
            <summary>
            Check cut card for dealer.
            </summary>
            <param name="cut">The cut card.</param>
            <returns>Points to the dealer for the cut card.</returns>
        </member>
        <member name="M:Skunked.Score.ScoreCalculator.CountShowPoints(Skunked.Cards.Card,System.Collections.Generic.IEnumerable{Skunked.Cards.Card},System.Boolean)">
            <summary>
            Calculate points scored in a show.
            </summary>
            <param name="starterCard">The starter card.</param>
            <param name="playerHand">Cards in the players hand.</param>
            <param name="isCrib">A crib is being scored.</param>
            <returns>The calculated result of points earned.</returns>
        </member>
        <member name="M:Skunked.Score.ScoreCalculator.CountPlayPoints(System.Collections.Generic.IList{Skunked.Cards.Card})">
            <summary>
            Count the points in the pile.
            </summary>
            <param name="pile">The current pile.</param>
            <returns>The points in the pile.</returns>
        </member>
        <member name="M:Skunked.Score.ScoreCalculator.FindFifteens(System.Collections.Generic.Dictionary{System.Int32,System.Collections.Generic.List{System.Collections.Generic.IList{Skunked.Cards.Card}}})">
            <summary>
            Returns collection of all unique sets of cards that add up to 15.
            </summary>
            <param name="combinationsToCount">Lookup of all card combinations by permutation count.</param>
            <returns>List of all 15 combinations.</returns>
        </member>
        <member name="M:Skunked.Score.ScoreCalculator.FindFlush(System.Collections.Generic.List{Skunked.Cards.Card},Skunked.Cards.Card)">
            <summary>
            All four cards in the hand are of the same suit.
            </summary>
            <param name="playersHand">The players hand.</param>
            <param name="starterCard">The starter card.</param>
            <returns>List of cards that make a flush or null if no flush found.</returns>
        </member>
        <member name="M:Skunked.Score.ScoreCalculator.FindPairs(System.Collections.Generic.Dictionary{System.Int32,System.Collections.Generic.List{System.Collections.Generic.IList{Skunked.Cards.Card}}})">
            <summary>
            A pair of cards of a kind.
            </summary>
            <param name="combinations">Lookup of all card combinations by permutation count.</param>
            <returns>Returns all pairs found.</returns>
        </member>
        <member name="M:Skunked.Score.ScoreCalculator.FindRuns(System.Collections.Generic.Dictionary{System.Int32,System.Collections.Generic.List{System.Collections.Generic.IList{Skunked.Cards.Card}}})">
            <summary>
            Find all unique runs of 3, 4, or 5 cards.
            </summary>
            <param name="combinations">Lookup of all card combinations by permutation count.</param>
            <returns>Set of all combinations of runs.</returns>
        </member>
        <member name="M:Skunked.Score.ScoreCalculator.FindNobs(System.Collections.Generic.IEnumerable{Skunked.Cards.Card},Skunked.Cards.Card)">
            <summary>
            When the Jack of the same suit matches the starter card.
            </summary>
            <param name="cards">Player's hand.</param>
            <param name="starterCard">The starter or the cut.</param>
            <returns>The Nob.</returns>
        </member>
        <member name="M:Skunked.Score.ScoreCalculator.IsFifteen(System.Collections.Generic.IList{Skunked.Cards.Card})">
            <summary>
             Separate combination of two or more cards totaling exactly fifteen.
            </summary>
            <param name="set">Set of cards to check.</param>
            <returns>True of set adds up to 15.</returns>
        </member>
        <member name="M:Skunked.Score.ScoreCalculator.SumValues(System.Collections.Generic.IEnumerable{Skunked.Cards.Card})">
            <summary>
            Sum of the value of the cards.
            </summary>
            <param name="set">Set of cards to sum.</param>
            <returns>The sum of the values.</returns>
        </member>
        <member name="M:Skunked.Score.ScoreCalculator.IsSameKind(System.Collections.Generic.IEnumerable{Skunked.Cards.Card})">
            <summary>
            Check if cards are all of same kind..
            </summary>
            <param name="set">Set of cards to check.</param>
            <returns>True of all cards are of the same kind.</returns>
        </member>
        <member name="M:Skunked.Score.ScoreCalculator.IsRun(System.Collections.Generic.IList{Skunked.Cards.Card})">
            <summary>
            Three or more consecutive cards (regardless of suit).
            </summary>
            <param name="set">The set of cards.</param>
            <returns>True if the cards form a run.</returns>
        </member>
        <member name="M:Skunked.Score.ScoreCalculator.IsContinuous(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Check if the value are continuous.
            </summary>
            <param name="values">The set of values.</param>
            <returns>True if all the values in set are continuous.</returns>
        </member>
        <member name="M:Skunked.Score.ScoreCalculator.GetCombinations``1(System.Collections.Generic.IList{``0})">
            <summary>
            Dictionary of the combinations.  The key is "k" in k-combination combinatorial mathematics. Zero is not calculated.
            The Value is the set of the combination sets.
            </summary>
            <typeparam name="T">The type of class to find combinations.</typeparam>
            <param name="source">The set of cards.</param>
            <returns>A dictionary where the key is the number of combinations.</returns>
        </member>
        <member name="T:Skunked.Score.ScoreWithCut">
            <summary>
            Represents a starter card and a score.
            </summary>
        </member>
        <member name="T:Skunked.Utility.EnumHelper">
            <summary>
            Set of enum helper functions.
            </summary>
        </member>
        <member name="M:Skunked.Utility.EnumHelper.GetValues``1">
            <summary>
            Returns all values of an enumeration.
            </summary>
            <typeparam name="T">The enum type to enumerate.</typeparam>
            <returns>The values of an enumeration.</returns>
        </member>
        <member name="T:Skunked.Utility.GameStateExtensions">
            <summary>
            Set of convenience methods to aggregate state from GameState.
            </summary>
        </member>
        <member name="M:Skunked.Utility.GameStateExtensions.IsGameFinished(Skunked.Domain.State.GameState)">
            <summary>
            If the game finished.
            </summary>
            <param name="game">The game state.</param>
            <returns>True if the game is finished and no more moves may be made.</returns>
        </member>
        <member name="M:Skunked.Utility.GameStateExtensions.GetCurrentRound(Skunked.Domain.State.GameState)">
            <summary>
            Get the current round.
            </summary>
            <param name="game">The game state.</param>
            <returns>The current round.</returns>
        </member>
        <member name="M:Skunked.Utility.GameStateExtensions.GetNextPlayerFrom(Skunked.Domain.State.GameState,System.Int32)">
            <summary>
            Get the next player after the given playerId in the rotation.
            </summary>
            <param name="gameState">The game state.</param>
            <param name="playerId">The id of the player.</param>
            <returns>The next player id in the rotation.</returns>
        </member>
        <member name="T:Skunked.Utility.LinqExtended">
            <summary>
            Functionally similar projections as LINQ library.
            </summary>
        </member>
        <member name="M:Skunked.Utility.LinqExtended.Cartesian``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})">
            <summary>
            Returns the Cartesian product of two sequences by enumerating all
            possible combinations of one item from each sequence, and applying
            a user-defined projection to the items in a given combination.
            </summary>
            <typeparam name="T1">
            The type of the elements of <paramref name="first"/>.</typeparam>
            <typeparam name="T2">
            The type of the elements of <paramref name="second"/>.</typeparam>
            <typeparam name="TResult">
            The type of the elements of the result sequence.</typeparam>
            <param name="first">The first sequence of elements.</param>
            <param name="second">The second sequence of elements.</param>
            <param name="resultSelector">A projection function that combines
            elements from all of the sequences.</param>
            <returns>A sequence of elements returned by
            <paramref name="resultSelector"/>.</returns>
            <remarks>
            <para>
            The method returns items in the same order as a nested foreach
            loop, but all sequences except for <paramref name="first"/> are
            cached when iterated over. The cache is then re-used for any
            subsequent iterations.</para>
            <para>
            This method uses deferred execution and stream its results.</para>
            </remarks>
        </member>
        <member name="M:Skunked.Utility.LinqExtended.Shuffle``1(System.Collections.Generic.IList{``0})">
            <summary>
            Randomly rearrange the set of items.
            </summary>
            <param name="source">IList to shuffle.</param>
            <typeparam name="T">The type of source sequence elements.</typeparam>
        </member>
        <member name="M:Skunked.Utility.LinqExtended.Shuffle``1(System.Collections.Generic.IList{``0},System.Random)">
            <summary>
            Randomly rearrange the set of items using the given random generator.
            </summary>
            <param name="source">IList to shuffle.</param>
            <param name="random">A random generator used as part of the selection algorithm.</param>
            <typeparam name="T">The type of source sequence elements.</typeparam>
        </member>
        <member name="M:Skunked.Utility.LinqExtended.NextOf``1(System.Collections.Generic.IList{``0},``0)">
            <summary>
            The list goes round and round and this returns the next item after the given item.
            </summary>
            <typeparam name="T">Type of item in the list.</typeparam>
            <param name="list">The source list.</param>
            <param name="item">The item to find next from.</param>
            <returns>The found item.</returns>
        </member>
        <member name="M:Skunked.Utility.LinqExtended.TakeEvery``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Returns every N-th element of a sequence.
            </summary>
            <typeparam name="TSource">Type of the source sequence.</typeparam>
            <param name="source">Source sequence.</param>
            <param name="step">Number of elements to bypass before returning the next element.</param>
            <returns>
            A sequence with every N-th element of the input sequence.
            </returns>
            <remarks>
            This operator uses deferred execution and streams its results.
            </remarks>
            <example>
            <code><![CDATA[
            int[] numbers = { 1, 2, 3, 4, 5 };
            var result = numbers.TakeEvery(2);
            ]]></code>
            The <c>result</c> variable, when iterated over, will yield 1, 3 and 5, in turn.
            </example>
        </member>
        <member name="M:Skunked.Utility.LinqExtended.Infinite``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Endless iterates source.  l
            </summary>
            <param name="source"></param>
            <typeparam name="TSource"></typeparam>
            <returns>Iterated Item</returns>
            <exception cref="T:System.ArgumentNullException">source must not be null.</exception>
        </member>
        <member name="T:Skunked.Utility.RandomProvider">
            <summary>
            Thread Safe Implementation of a Random class provider by Jon Skeet
            http://csharpindepth.com/Articles/Chapter12/Random.aspx .
            </summary>
        </member>
        <member name="M:Skunked.Utility.RandomProvider.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Skunked.Utility.RandomProvider"/> class.
            </summary>
        </member>
        <member name="P:Skunked.Utility.RandomProvider.RandomInstance">
            <summary>
            Sets for Testing purposes only.
            </summary>
        </member>
        <member name="M:Skunked.Utility.RandomProvider.ResetInstance">
            <summary>
            Restart instance of random generator.
            </summary>
        </member>
    </members>
</doc>
