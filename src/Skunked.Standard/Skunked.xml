<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Skunked</name>
    </assembly>
    <members>
        <member name="T:Skunked.Cards.Order.RankComparer">
            <summary>
            Compare by value of the Cards rank only.
            </summary>
        </member>
        <member name="P:Skunked.Cards.Order.RankComparer.Instance">
            <summary>
            
            </summary>
        </member>
        <member name="M:Skunked.Cards.Order.RankComparer.Compare(Skunked.Cards.Card,Skunked.Cards.Card)">
            <inheritdoc />
        </member>
        <member name="T:Skunked.Cards.Rank">
            <summary>
            Set of playing card ranks
            </summary>
        </member>
        <member name="F:Skunked.Cards.Rank.Ace">
            <summary>
            ðŸ‚±
            </summary>
        </member>
        <member name="F:Skunked.Cards.Rank.Two">
            <summary>
            ðŸ‚¢
            </summary>
        </member>
        <member name="F:Skunked.Cards.Rank.Three">
            <summary>
            ðŸ‚£
            </summary>
        </member>
        <member name="F:Skunked.Cards.Rank.Four">
            <summary>
            ðŸ‚¤
            </summary>
        </member>
        <member name="F:Skunked.Cards.Rank.Five">
            <summary>
            ðŸ‚¥
            </summary>
        </member>
        <member name="F:Skunked.Cards.Rank.Six">
            <summary>
            ðŸ‚¦
            </summary>
        </member>
        <member name="F:Skunked.Cards.Rank.Seven">
            <summary>
            ðŸ‚§
            </summary>
        </member>
        <member name="F:Skunked.Cards.Rank.Eight">
            <summary>
            ðŸ‚¨
            </summary>
        </member>
        <member name="F:Skunked.Cards.Rank.Nine">
            <summary>
            ðŸ‚©
            </summary>
        </member>
        <member name="F:Skunked.Cards.Rank.Ten">
            <summary>
            ðŸ‚ª
            </summary>
        </member>
        <member name="F:Skunked.Cards.Rank.Jack">
            <summary>
            ðŸ‚«
            </summary>
        </member>
        <member name="F:Skunked.Cards.Rank.Queen">
            <summary>
            ðŸ‚­
            </summary>
        </member>
        <member name="F:Skunked.Cards.Rank.King">
            <summary>
            ðŸ‚®
            </summary>
        </member>
        <member name="T:Skunked.Cards.Suit">
            <summary>
            Categories into which the cards of a deck are divided
            </summary>
        </member>
        <member name="F:Skunked.Cards.Suit.Clubs">
            <summary>
            â™£
            </summary>
        </member>
        <member name="F:Skunked.Cards.Suit.Diamonds">
            <summary>
            â™¦
            </summary>
        </member>
        <member name="F:Skunked.Cards.Suit.Hearts">
            <summary>
            â™¥
            </summary>
        </member>
        <member name="F:Skunked.Cards.Suit.Spades">
            <summary>
            â™ 
            </summary>
        </member>
        <member name="T:Skunked.Cards.Value.AceLowFaceTenCardValueStrategy">
            <summary>
            
            </summary>
        </member>
        <member name="M:Skunked.Cards.Value.AceLowFaceTenCardValueStrategy.GetValue(Skunked.Cards.Card)">
            <summary>
            
            </summary>
            <param name="card"></param>
            <returns></returns>
        </member>
        <member name="T:Skunked.Cribbage">
            <summary>
            The class for creating and modeling a game of Cribbage. "Plays" are validated and stored as a stream of events. Event listeners allow denormalized state to be created from the stream.
            </summary>
        </member>
        <member name="M:Skunked.Cribbage.#ctor(System.Collections.Generic.IEnumerable{System.Int32},Skunked.Rules.GameRules,System.Collections.Generic.IEnumerable{Skunked.State.Events.IEventListener})">
            <summary>
            Constructs a new game of Cribbage.
            </summary>
            <param name="players"></param>
            <param name="rules"></param>
            <param name="eventListeners"></param>
        </member>
        <member name="T:Skunked.Dealer.IDealer">
            <summary>
            Deals cards to a set of players
            </summary>
        </member>
        <member name="M:Skunked.Dealer.IDealer.Deal(Skunked.Cards.Deck,System.Collections.Generic.IList{System.Int32},System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="deck"></param>
            <param name="players"></param>
            <param name="startingWith"></param>
            <param name="handSize"></param>
            <returns></returns>
        </member>
        <member name="T:Skunked.Dealer.StandardDealer">
            <summary>
            Standard dealer.  One card per pass.
            </summary>
        </member>
        <member name="M:Skunked.Dealer.StandardDealer.Deal(Skunked.Cards.Deck,System.Collections.Generic.IList{System.Int32},System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="deck"></param>
            <param name="players"></param>
            <param name="startingWith"></param>
            <param name="handSize"></param>
            <returns></returns>
        </member>
        <member name="T:Skunked.Exceptions.InvalidCribbageOperationException">
            <summary>
            
            </summary>
        </member>
        <member name="P:Skunked.Exceptions.InvalidCribbageOperationException.Operation">
            <summary>
            The invalid cribbage operation that was attempted.
            </summary>
        </member>
        <member name="M:Skunked.Exceptions.InvalidCribbageOperationException.#ctor(Skunked.Exceptions.InvalidCribbageOperation)">
            <summary>
            
            </summary>
            <param name="operation"></param>
        </member>
        <member name="T:Skunked.Exceptions.InvalidCribbageOperation">
            <summary>
            Set of exception types that can be thrown by the game when a rule is violated.
            </summary>
        </member>
        <member name="F:Skunked.Exceptions.InvalidCribbageOperation.CutCardPlayerAlreadyCut">
            <summary>
            Player already cut a card from the deck.
            </summary>
        </member>
        <member name="F:Skunked.Exceptions.InvalidCribbageOperation.CutCardCardAlreadyCut">
            <summary>
            A player already this card from the deck.
            </summary>
        </member>
        <member name="F:Skunked.Exceptions.InvalidCribbageOperation.NotPlayersTurn">
            <summary>
            Player attempted to play when not their turn.
            </summary>
        </member>
        <member name="F:Skunked.Exceptions.InvalidCribbageOperation.CardHasBeenPlayed">
            <summary>
            The played card has already been played.
            </summary>
        </member>
        <member name="F:Skunked.Exceptions.InvalidCribbageOperation.CardsHaveBeenThrown">
            <summary>
            
            </summary>
        </member>
        <member name="F:Skunked.Exceptions.InvalidCribbageOperation.InvalidPlayer">
            <summary>
            
            </summary>
        </member>
        <member name="F:Skunked.Exceptions.InvalidCribbageOperation.InvalidStateForPlay">
            <summary>
            
            </summary>
        </member>
        <member name="F:Skunked.Exceptions.InvalidCribbageOperation.InvalidCard">
            <summary>
            
            </summary>
        </member>
        <member name="F:Skunked.Exceptions.InvalidCribbageOperation.InvalidStateForCount">
            <summary>
            
            </summary>
        </member>
        <member name="F:Skunked.Exceptions.InvalidCribbageOperation.InvalidStateForCribCount">
            <summary>
            
            </summary>
        </member>
        <member name="F:Skunked.Exceptions.InvalidCribbageOperation.InvalidShowCount">
            <summary>
            
            </summary>
        </member>
        <member name="F:Skunked.Exceptions.InvalidCribbageOperation.PlayerHasAlreadyCounted">
            <summary>
            
            </summary>
        </member>
        <member name="F:Skunked.Exceptions.InvalidCribbageOperation.GameFinished">
            <summary>
            
            </summary>
        </member>
        <member name="F:Skunked.Exceptions.InvalidCribbageOperation.InvalidRequest">
            <summary>
            
            </summary>
        </member>
        <member name="M:Skunked.Game.GameRunner.#ctor(Skunked.Cards.Deck)">
            <summary>
            Synchronous Game of Cribbage
            </summary>
            <param name="deck"></param>
        </member>
        <member name="M:Skunked.Players.IGameRunnerPlayer.DealHand(System.Collections.Generic.IList{Skunked.Cards.Card})">
            <summary>
            Deal Hand and return cards that will go back in crib
            </summary>
            <param name="hand"></param>
            <returns>Set of Cards to throw in crib.</returns>
        </member>
        <member name="M:Skunked.Players.IDecisionStrategy.DetermineCardsToThrow(System.Collections.Generic.IEnumerable{Skunked.Cards.Card})">
            <summary>
            Take a dealt cribbage hand and return which cards should be thrown.
            </summary>
            <param name="hand">dealt hand</param>
            <returns>cards to throw</returns>
        </member>
        <member name="T:Skunked.Players.PlayerHand">
            <summary>
            A player id and their hand
            </summary>
        </member>
        <member name="M:Skunked.Players.PlayerHand.#ctor(System.Int32,System.Collections.Generic.List{Skunked.Cards.Card})">
            <summary>
            Initializes a new instance of PlayerHand with the player's id and their hand.
            </summary>
            <param name="playerId"></param>
            <param name="hand"></param>
        </member>
        <member name="T:Skunked.Rules.GameRules">
            <summary>
            Set of Cribbage rules.
            </summary>
        </member>
        <member name="P:Skunked.Rules.GameRules.HandSize">
            <summary>
            
            </summary>
        </member>
        <member name="T:Skunked.Rules.GameRules.Scores">
            <summary>
            
            </summary>
        </member>
        <member name="P:Skunked.Rules.GameRules.Scores.Go">
            <summary>
            
            </summary>
        </member>
        <member name="P:Skunked.Rules.GameRules.Scores.PlayMaxScore">
            <summary>
            
            </summary>
        </member>
        <member name="P:Skunked.Rules.GameRules.Scores.FifteenScore">
            <summary>
            
            </summary>
        </member>
        <member name="P:Skunked.Rules.GameRules.Scores.NibsScore">
            <summary>
            
            </summary>
        </member>
        <member name="P:Skunked.Rules.GameRules.Scores.NobsScore">
            <summary>
            
            </summary>
        </member>
        <member name="P:Skunked.Rules.GameRules.Scores.PairScore">
            <summary>
            
            </summary>
        </member>
        <member name="P:Skunked.Rules.GameRules.Scores.PairRoyalScore">
            <summary>
            
            </summary>
        </member>
        <member name="P:Skunked.Rules.GameRules.Scores.DoublePairRoyalScore">
            <summary>
            
            </summary>
        </member>
        <member name="P:Skunked.Rules.GameRules.Scores.FourCardFlush">
            <summary>
            
            </summary>
        </member>
        <member name="P:Skunked.Rules.GameRules.Scores.FiveCardFlush">
            <summary>
            
            </summary>
        </member>
        <member name="T:Skunked.Rules.WinningScoreType">
            <summary>
            
            </summary>
        </member>
        <member name="F:Skunked.Rules.WinningScoreType.Short61">
            <summary>
            Shortened 61 point game
            </summary>
        </member>
        <member name="F:Skunked.Rules.WinningScoreType.Standard121">
            <summary>
            Standard 121 point game
            </summary>
        </member>
        <member name="T:Skunked.Score.ComboPossibleScores">
            <summary>
            Couple a set of cards with all of the possible scoring outcomes for that combo
            </summary>
        </member>
        <member name="M:Skunked.Score.ScoreCalculator.CountCut(Skunked.Cards.Card)">
            <summary>
            Check cut card for dealer
            </summary>
            <param name="cut"></param>
            <returns></returns>
        </member>
        <member name="M:Skunked.Score.ScoreCalculator.CountFlush(System.Collections.Generic.List{Skunked.Cards.Card},Skunked.Cards.Card)">
            <summary>
            Returns the set of either all four cards in the hand if they are all of the same suit,
            or all five cards if the starter card matches the other four cards suit.
            </summary>
            <param name="playersHand"></param>
            <param name="starterCard"></param>
            <returns></returns>
        </member>
        <member name="M:Skunked.Score.ScoreCalculator.CountPairs(System.Collections.Generic.Dictionary{System.Int32,System.Collections.Generic.List{System.Collections.Generic.IList{Skunked.Cards.Card}}})">
            <summary>
            A pair of cards of a kind
            </summary>
            <param name="combinationsToCheck"></param>
            <returns>Returns all pairs found.</returns>
        </member>
        <member name="M:Skunked.Score.ScoreCalculator.CountRuns(System.Collections.Generic.Dictionary{System.Int32,System.Collections.Generic.List{System.Collections.Generic.IList{Skunked.Cards.Card}}})">
            <summary>
            Three consecutive cards (regardless of suit)
            </summary>
            <param name="combinationsToCount"></param>
            <returns></returns>
        </member>
        <member name="M:Skunked.Score.ScoreCalculator.Nobs(System.Collections.Generic.IEnumerable{Skunked.Cards.Card},Skunked.Cards.Card)">
            <summary>
            When the Jack of the same suit matches the starter card.
            </summary>
            <param name="cards"></param>
            <param name="starterCard"></param>
            <returns></returns>
        </member>
        <member name="M:Skunked.Score.ScoreCalculator.IsFifteen(System.Collections.Generic.IList{Skunked.Cards.Card})">
            <summary>
             Separate combination of two or more cards totaling exactly fifteen
            </summary>
            <param name="cards"></param>
            <returns></returns>
        </member>
        <member name="M:Skunked.Score.ScoreCalculator.IsRun(System.Collections.Generic.IList{Skunked.Cards.Card})">
            <summary>
            Three or more consecutive cards (regardless of suit)
            </summary>
            <param name="combo"></param>
            <returns></returns>
        </member>
        <member name="M:Skunked.Score.ScoreCalculator.GetCombinations(System.Collections.Generic.IList{Skunked.Cards.Card})">
            <summary>
            Dictionary of the combinations.  The key is "k" in k-combination combinatorial mathematics. Zero is not calculated.
            The Value is the set of the combination sets
            </summary>
            <param name="sourceSet"></param>
            <returns></returns>
        </member>
        <member name="T:Skunked.State.PlayerScore">
            <summary>
            Player Id and a score.
            </summary>
        </member>
        <member name="P:Skunked.State.PlayerScore.Player">
            <summary>
            Player Id
            </summary>
        </member>
        <member name="P:Skunked.State.PlayerScore.Score">
            <summary>
            The player's score.
            </summary>
        </member>
        <member name="T:Skunked.Utility.RandomProvider">
            <summary>
            Thread Safe Implementation of a Random class provider by Jon Skeet
            http://csharpindepth.com/Articles/Chapter12/Random.aspx
            </summary>
        </member>
        <member name="P:Skunked.Utility.RandomProvider.RandomInstance">
            <summary>
            For Testing purposes only
            </summary>
        </member>
    </members>
</doc>
